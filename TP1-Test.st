TestCase subclass: #AlgoFixTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Test'!!AlgoFixTest methodsFor: 'tests' stamp: 'Julian 5/24/2020 11:54'!testPresupuestoMasBaratoConInformacionInvalidaDebeLanzarExepcion	| algofix alba|		algofix := AlgoFix new.	algofix registrarPintorDePincel: 'Diego' conValorHora: 200.	alba := algofix crearPintura: 'Alba' conPrecioPorLitro: 213 manosPincel: 15 manosRodillo: 27.		self should: [ 	algofix presupuestoMasBaratoParaPintarMetrosCuadrados: 0 conPintura: alba]	raise: InformacionInvalida.		self should: [ 	algofix presupuestoMasBaratoParaPintarMetrosCuadrados: -1 conPintura: alba]	raise: InformacionInvalida.		self should: [ 	algofix presupuestoMasBaratoParaPintarMetrosCuadrados: 16 conPintura: nil]	raise: PinturaNoReconocida.! !!AlgoFixTest methodsFor: 'tests' stamp: 'Julian 5/24/2020 11:54'!testCrearPinturaNoValidaDebeLanzarExepcion	| algofix |		algofix := AlgoFix new.		self should: [ algofix crearPintura: '' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 2]	raise: InformacionInvalida.		self should: [ algofix crearPintura: 'Alba' conPrecioPorLitro: 0 manosPincel: 1 manosRodillo: 2]	raise: InformacionInvalida.		self should: [ algofix crearPintura: 'Alba' conPrecioPorLitro: -1 manosPincel: 1 manosRodillo: 2]	raise: InformacionInvalida.		self should: [ algofix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: 0 manosRodillo: 2]	raise: InformacionInvalida.		self should: [ algofix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 0]	raise: InformacionInvalida.		self should: [ algofix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: -1 manosRodillo: 1]	raise: InformacionInvalida.! !!AlgoFixTest methodsFor: 'tests' stamp: 'Julian 5/24/2020 12:15'!testPresupuestoMasBaratoConTecnicaPincelConDescuento	| algofix alba presupuesto valorEsperado |	"Arrange"	algofix := AlgoFix new.	algofix registrarPintorDePincel: 'Diego' conValorHora: 218.	algofix registrarPintorDePincel: 'Pablo' conValorHora: 312.	algofix registrarPintorDePincel: 'Raul' conValorHora: 123.		alba := algofix crearPintura: 'Alba' conPrecioPorLitro: 213 manosPincel: 5 manosRodillo: 3.		"Act"	presupuesto := algofix presupuestoMasBaratoParaPintarMetrosCuadrados: 50 conPintura: alba.	valorEsperado := algofix		manoDeObra: 			(50 "M2" * 2 "horas" * 123 "Precio" * 5 "manos" * 0.5) 		masMateriales: 			(50 "M2" * 4 "litros" * 213 "Precio" * 5 "manos").		"Assert"	self assert: presupuesto isNil equals: false.	self assert: (presupuesto responsable) equals: 'Raul'.	self assert: presupuesto valor equals: valorEsperado.! !!AlgoFixTest methodsFor: 'tests' stamp: 'Julian 5/24/2020 12:15'!testPresupuestoMasBaratoConTecnicaRodillo	| algofix alba presupuesto valorEsperado |	"Arrange"	algofix := AlgoFix new.	algofix registrarPintorDeRodillo: 'Diego' conValorHora: 218.	algofix registrarPintorDeRodillo: 'Pablo' conValorHora: 312.	algofix registrarPintorDeRodillo: 'Raul' conValorHora: 123.		alba := algofix crearPintura: 'Alba' conPrecioPorLitro: 211 manosPincel: 4 manosRodillo: 3.		"Act"	presupuesto := algofix presupuestoMasBaratoParaPintarMetrosCuadrados: 2 conPintura: alba.	valorEsperado := algofix		manoDeObra: 			(2 "M2" * 1 "horas" * 123 "Precio" * 3 "manos") 		masMateriales: 			(2 "M2" * 5 "litros" * 211 "Precio" * 3 "manos").				"Assert"			self assert: presupuesto isNil equals: false.	self assert: (presupuesto responsable) equals: 'Raul'.	self assert: presupuesto valor equals: valorEsperado.! !!AlgoFixTest methodsFor: 'tests' stamp: 'Julian 5/24/2020 11:54'!testRegistrarPintorNoValidoDebeLanzarExepcion	| algofix |		algofix := AlgoFix new.		self should: [ algofix registrarPintorDePincel: '' conValorHora: 200.]	raise: InformacionInvalida.		self should: [ algofix registrarPintorDePincel: 'Diego' conValorHora: 0.]	raise: InformacionInvalida.		self should: [ algofix registrarPintorDePincel: 'Diego' conValorHora: -1.]	raise: InformacionInvalida.! !!AlgoFixTest methodsFor: 'tests' stamp: 'Julian 5/24/2020 12:15'!testPresupuestoMasBaratoConAmbasTecnicas	| algofix alba presupuesto valorEsperado |	"Arrange"	algofix := AlgoFix new.	algofix registrarPintorDePincel: 'Diego' conValorHora: 218.	algofix registrarPintorDeRodillo: 'Pablo' conValorHora: 312.	algofix registrarPintorDePincel: 'Juan' conValorHora: 420.	algofix registrarPintorDeRodillo: 'Raul' conValorHora: 123.		alba := algofix crearPintura: 'Alba' conPrecioPorLitro: 213 manosPincel: 1 manosRodillo: 2.		"Act"	presupuesto := algofix presupuestoMasBaratoParaPintarMetrosCuadrados: 60 conPintura: alba.	valorEsperado := algofix		manoDeObra: 			(60 "M2" * 2 "horas" * 218 "Precio" * 1 "manos" * 0.5) 		masMateriales: 			(60 "M2" * 4 "litros" * 213 "Precio" * 1 "manos").				"Assert"	self assert: presupuesto isNil equals: false.	self assert: (presupuesto responsable) equals: 'Diego'.	self assert: presupuesto valor equals: valorEsperado.! !!AlgoFixTest methodsFor: 'tests' stamp: 'Julian 5/24/2020 12:14'!testPresupuestoMasBaratoConTecnicaPincelSinDescuento	| algofix alba presupuesto valorEsperado |		"Arrange"	algofix := AlgoFix new.	algofix registrarPintorDePincel: 'Diego' conValorHora: 218.	algofix registrarPintorDePincel: 'Pablo' conValorHora: 312.	algofix registrarPintorDePincel: 'Raul' conValorHora: 127.		alba := algofix crearPintura: 'Alba' conPrecioPorLitro: 213 manosPincel: 2 manosRodillo: 1.		"Act"	presupuesto := algofix presupuestoMasBaratoParaPintarMetrosCuadrados: 11 conPintura: alba.	valorEsperado := algofix		manoDeObra: 			(11 "M2" * 2 "horas" * 127 "Precio" * 2 "manos") 		masMateriales: 			(11 "M2" * 4 "litros" * 213 "Precio" * 2"manos").				"Assert"	self assert: presupuesto isNil equals: false.	self assert: (presupuesto responsable) equals: 'Raul'.	self assert: presupuesto valor equals: valorEsperado.! !!AlgoFixTest methodsFor: 'tests' stamp: 'Julian 5/24/2020 12:15'!testPresupuestoMasBaratoConPintoresRepetidos	| algofix alba presupuesto valorEsperado |	"Arrange"	algofix := AlgoFix new.	algofix registrarPintorDePincel: 'Diego' conValorHora: 218.	algofix registrarPintorDePincel: 'Diego' conValorHora: 218.		alba := algofix crearPintura: 'Alba' conPrecioPorLitro: 213 manosPincel: 1 manosRodillo: 2.		"Act"	presupuesto := algofix presupuestoMasBaratoParaPintarMetrosCuadrados: 60 conPintura: alba.	valorEsperado := algofix		manoDeObra: 			(60 "M2" * 2 "horas" * 218 "Precio" * 1 "manos" * 0.5) 		masMateriales: 			(60 "M2" * 4 "litros" * 213 "Precio" * 1 "manos").				"Assert"	self assert: presupuesto isNil equals: false.	self assert: (presupuesto responsable) equals: 'Diego'.	self assert: presupuesto valor equals: valorEsperado.! !!AlgoFixTest methodsFor: 'tests' stamp: 'Julian 5/24/2020 11:54'!testPresupuestoMasBaratoSinPintoresDebeLanzarExepcion	| algofix alba |		algofix := AlgoFix new.	alba := algofix crearPintura: 'Alba' conPrecioPorLitro: 213 manosPincel: 7 manosRodillo: 5.		self should: [ algofix presupuestoMasBaratoParaPintarMetrosCuadrados: 11 conPintura: alba ]	raise: NoHayPintoresRegistrados.! !!AlgoFixTest methodsFor: 'tests' stamp: 'Julian 5/24/2020 12:14'!testPresupuestoMasBaratoConUnPintor	| algofix alba presupuesto valorEsperado |		algofix := AlgoFix new.	algofix registrarPintorDePincel: 'Diego' conValorHora: 218.	alba := algofix crearPintura: 'Alba' conPrecioPorLitro: 213 manosPincel: 7 manosRodillo: 5.		"Act"	presupuesto := algofix presupuestoMasBaratoParaPintarMetrosCuadrados: 11 conPintura: alba.	valorEsperado := algofix		manoDeObra: 			(11 "M2" * 2 "horas" * 218 "Precio" * 7 "manos") 		masMateriales: 			(11 "M2" * 4 "litros" * 213 "Precio" * 7 "manos").				self assert: presupuesto isNil equals: false.	self assert: (presupuesto responsable) equals: 'Diego'.	self assert: (presupuesto valor) equals: valorEsperado.	! !!AlgoFixTest methodsFor: 'tests' stamp: 'Julian 5/24/2020 18:55'!testPresupuestoMasBaratoConDosPintoresDeMismoValorDeberiaDarElPrimerRegistrado	| algofix alba presupuesto valorEsperado |	"Arrange"	algofix := AlgoFix new.	algofix registrarPintorDePincel: 'Diego' conValorHora: 218.	algofix registrarPintorDePincel: 'Juan' conValorHora: 218.		alba := algofix crearPintura: 'Alba' conPrecioPorLitro: 213 manosPincel: 1 manosRodillo: 2.		"Act"	presupuesto := algofix presupuestoMasBaratoParaPintarMetrosCuadrados: 60 conPintura: alba.	valorEsperado := algofix		manoDeObra: 			(60 "M2" * 2 "horas" * 218 "Precio" * 1 "manos" * 0.5) 		masMateriales: 			(60 "M2" * 4 "litros" * 213 "Precio" * 1 "manos").				"Assert"	self assert: presupuesto isNil equals: false.	self assert: (presupuesto responsable) equals: 'Diego'.	self assert: presupuesto valor equals: valorEsperado.! !TestCase subclass: #PintorTest	instanceVariableNames: 'tecnicaPincel tecnicaRodillo diccionarioManos diccionarioManos2 pinturaAlba pinturaVenier'	classVariableNames: ''	package: 'TP1-Test'!!PintorTest methodsFor: 'running' stamp: 'Julian 5/25/2020 12:23'!setUp	tecnicaPincel := Pincel new.	tecnicaRodillo := Rodillo new.	pinturaAlba := Pintura conNombre: 'Alba' conPrecio: 111 manosPincel: 1 manosRodillo: 3.	pinturaVenier := Pintura conNombre: 'Venier' conPrecio: 58 manosPincel: 3 manosRodillo: 1.! !!PintorTest methodsFor: 'tests' stamp: 'Julian 5/23/2020 15:29'!testCalcularPresupuestoConDistintasTecnicas	| pintor pintor2 presupuesto presupuesto2 |		pintor := Pintor conNombre: 'Diego' conPrecio: 321 conTecnica: tecnicaPincel.	pintor2 := Pintor conNombre: 'Pablo' conPrecio: 300 conTecnica: tecnicaRodillo.		presupuesto := pintor calcularPresupuestoConMetros: 5 conPintura: pinturaAlba.	presupuesto2 := pintor2 calcularPresupuestoConMetros: 5 conPintura: pinturaAlba.		self assert: (presupuesto = presupuesto2) equals: false.	self assert: presupuesto valor equals: (5 * 2 * 321 * 1) + (5 * 4 * 111 * 1).	self assert: presupuesto2 valor equals: (5 * 1 * 300 * 3) + (5 * 5 * 111 * 3).! !!PintorTest methodsFor: 'tests' stamp: 'Julian 5/23/2020 15:34'!testCalcularPresupuestoConDistintasPinturas	| pintor presupuesto presupuesto2 |		pintor := Pintor conNombre: 'Diego' conPrecio: 321 conTecnica: tecnicaPincel.		presupuesto := pintor calcularPresupuestoConMetros: 5 conPintura: pinturaAlba.	presupuesto2 := pintor calcularPresupuestoConMetros: 5 conPintura: pinturaVenier.		self assert: (presupuesto = presupuesto2) equals: false.	self assert: presupuesto valor equals: (5 * 2 * 321 * 1) + (5 * 4 * 111 * 1).	self assert: presupuesto2 valor equals: (5 * 2 * 321 * 3) + (5 * 4 * 58 * 3).! !TestCase subclass: #PinturaTest	instanceVariableNames: 'diccionarioManos tecnicaPincel tecnicaRodillo'	classVariableNames: ''	package: 'TP1-Test'!!PinturaTest methodsFor: 'tests' stamp: 'Julian 5/25/2020 12:57'!testCalcularMaterialesConDistintasTecnicas	| pinturaAlba valor valor2|	pinturaAlba := Pintura conNombre: 'Alba' conPrecio: 123 manosPincel: 1 manosRodillo: 3.		valor := pinturaAlba calcularMateriales: 11 conTecnica: tecnicaPincel.	valor2 := pinturaAlba calcularMateriales: 11 conTecnica: tecnicaRodillo.		self assert: (valor = valor2) equals: false.	self assert: valor equals: (11 * 4 * 123 * 1).	self assert: valor2 equals: (11 * 5 * 123 * 3).		! !!PinturaTest methodsFor: 'tests' stamp: 'Julian 5/25/2020 13:02'!testCalcularMaterialesConDistintasPinturas	| pinturaAlba pinturaVenier valor valor2|	pinturaAlba := Pintura conNombre: 'Alba' conPrecio: 123 manosPincel: 1 manosRodillo: 3.	pinturaVenier := Pintura conNombre: 'Venier' conPrecio: 231 manosPincel: 3 manosRodillo: 1.		valor := pinturaAlba calcularMateriales: 11 conTecnica: tecnicaPincel.	valor2 := pinturaVenier calcularMateriales: 11 conTecnica: tecnicaPincel.		self assert: (valor = valor2) equals: false.	self assert: valor equals: (11 * 4 * 123 * 1).	self assert: valor2 equals: (11 * 4 * 231 * 3).		! !!PinturaTest methodsFor: 'running' stamp: 'Julian 5/25/2020 12:57'!setUp	tecnicaPincel := Pincel new.	tecnicaRodillo := Rodillo new.! !TestCase subclass: #PresupuestoTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Test'!!PresupuestoTest methodsFor: 'tests' stamp: 'Julian 5/26/2020 11:14'!testComparacionEntrePresupuestos	| presupuesto1 presupuesto2 presupuesto3 |		presupuesto1 := Presupuesto conNombre: 'Diego' conValor: 100.	presupuesto2 := Presupuesto conNombre: 'Diego' conValor: 200.	presupuesto3 := Presupuesto conNombre: 'Pablo' conValor: 250.		self deny: (presupuesto1 < presupuesto1).	self assert: (presupuesto1 < presupuesto2).	self assert: (presupuesto1 < presupuesto3).! !TestCase subclass: #TecnicaTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Test'!!TecnicaTest methodsFor: 'tests' stamp: 'Julian 5/26/2020 11:15'!testCalcularManoObraConDistintasPinturas	| pinturaAlba pinturaVenier valor valor2 pincel  |	pincel := Pincel new.	pinturaAlba := Pintura conNombre: 'Alba' conPrecio: 123 manosPincel: 1 manosRodillo: 3.	pinturaVenier := Pintura conNombre: 'Venier' conPrecio: 231 manosPincel: 3 manosRodillo: 1.		valor := pincel calcularManoObra: 11 conPintura: pinturaAlba.	valor2 := pincel calcularManoObra: 11 conPintura: pinturaVenier.		self deny: (valor = valor2).	self assert: valor equals: (11 * 2 * 1).	self assert: valor2 equals: (11 * 2 * 3).! !!TecnicaTest methodsFor: 'tests' stamp: 'Julian 5/23/2020 15:49'!testAplicarDescuentoConDistintasTecnicas	| pincel rodillo |		pincel := Pincel new.	rodillo := Rodillo new.		self assert: (pincel aplicarDescuento: 100 conMetros: 10) equals: 100.	self assert: (pincel aplicarDescuento: 100 conMetros: 60) equals: 50.	self assert: (pincel aplicarDescuento: 100 conMetros: -1) equals: 100.		self assert: (rodillo aplicarDescuento: 100 conMetros: 10) equals: 100.	self assert: (rodillo aplicarDescuento: 100 conMetros: 60) equals: 100.	self assert: (rodillo aplicarDescuento: 100 conMetros: -1) equals: 100.! !!TecnicaTest methodsFor: 'tests' stamp: 'Julian 5/23/2020 15:44'!testObtenerHorasConDistintasTecnicas	| pincel rodillo |		pincel := Pincel new.	rodillo := Rodillo new.		self assert: (pincel obtenerHoras: 5) equals: (5 * 2).	self assert: (pincel obtenerHoras: 0) equals: 0.	self assert: (rodillo obtenerHoras: 5) equals: (5 * 1).	self assert: (rodillo obtenerHoras: 0) equals: 0.! !!TecnicaTest methodsFor: 'tests' stamp: 'Julian 5/25/2020 13:05'!testCalcularManoObraConDistintasTecnicas	| pinturaAlba pinturaVenier valor valor2 pincel  rodillo |	pincel := Pincel new.	rodillo := Rodillo new.	pinturaAlba := Pintura conNombre: 'Alba' conPrecio: 123 manosPincel: 1 manosRodillo: 3.	pinturaVenier := Pintura conNombre: 'Venier' conPrecio: 231 manosPincel: 3 manosRodillo: 1.		valor := pincel calcularManoObra: 11 conPintura: pinturaAlba.	valor2 := rodillo calcularManoObra: 11 conPintura: pinturaVenier.		self assert: (valor = valor2) equals: false.	self assert: valor equals: (11 * 2 * 1).	self assert: valor2 equals: (11 * 1 * 1).! !!TecnicaTest methodsFor: 'tests' stamp: 'Julian 5/23/2020 15:46'!testObtenerLitrosConDistintasTecnicas	| pincel rodillo |		pincel := Pincel new.	rodillo := Rodillo new.		self assert: (pincel obtenerLitros: 2) equals: (2 * 4).	self assert: (pincel obtenerLitros: 0) equals: 0.	self assert: (rodillo obtenerLitros: 2) equals: (2 * 5).	self assert: (rodillo obtenerLitros: 0) equals: 0.! !